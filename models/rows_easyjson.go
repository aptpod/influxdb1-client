// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson982d9e1bDecodeGithubComAptpodInfluxdb1ClientModels(in *jlexer.Lexer, out *Row) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Tags)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "columns":
			if in.IsNull() {
				in.Skip()
				out.Columns = nil
			} else {
				in.Delim('[')
				if out.Columns == nil {
					if !in.IsDelim(']') {
						out.Columns = make([]string, 0, 4)
					} else {
						out.Columns = []string{}
					}
				} else {
					out.Columns = (out.Columns)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Columns = append(out.Columns, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([][]interface{}, 0, 2)
					} else {
						out.Values = [][]interface{}{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v3 []interface{}
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						in.Delim('[')
						if v3 == nil {
							if !in.IsDelim(']') {
								v3 = make([]interface{}, 0, 4)
							} else {
								v3 = []interface{}{}
							}
						} else {
							v3 = (v3)[:0]
						}
						for !in.IsDelim(']') {
							var v4 interface{}
							if m, ok := v4.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v4.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v4 = in.Interface()
							}
							v3 = append(v3, v4)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "partial":
			out.Partial = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson982d9e1bEncodeGithubComAptpodInfluxdb1ClientModels(out *jwriter.Writer, in Row) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Tags {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Columns) != 0 {
		const prefix string = ",\"columns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Columns {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Values {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v10, v11 := range v9 {
						if v10 > 0 {
							out.RawByte(',')
						}
						if m, ok := v11.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v11.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v11))
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.Partial {
		const prefix string = ",\"partial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Partial))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Row) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson982d9e1bEncodeGithubComAptpodInfluxdb1ClientModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Row) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson982d9e1bEncodeGithubComAptpodInfluxdb1ClientModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Row) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson982d9e1bDecodeGithubComAptpodInfluxdb1ClientModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Row) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson982d9e1bDecodeGithubComAptpodInfluxdb1ClientModels(l, v)
}
